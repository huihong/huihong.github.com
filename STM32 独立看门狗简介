STM32 的独立看门狗由内部专门的 40Khz 低速时钟驱动，即使主时钟发生故障，它也仍然有效。

    看门狗的原理：单片机系统在外界的干扰下会出现程序跑飞的现象导致出现死循环，看门狗电路就是为了避免这种情况的发生。看门狗的作用就是在一定时间内（通过定时计数器实现）没有接收喂狗信号（表示 MCU 已经挂了），便实现处理器的自动复位重启（发送复位信号） 。

    在键值寄存器(IWDG_KR)中写入 0xCCCC，开始启用独立看门狗；此时计数器开始从其复位值 0xFFF 递减计数。当计数器计数到末尾 0x000 时，会产生一个复位信号(IWDG_RESET)。无论何时，只要键值寄存器(IWDG_KR)中被写入 0xAAAA，重装载寄存器（IWDG_RLR） 中的值就会被重新加载到计数器中从而避免产生看门狗复位，这也是所谓的喂狗。

    预分频寄存器（IWDG_PR） 和 重装载寄存器（IWDG_RLR） 具有写保护功能。要修改这两个寄存器的值，必须先向键值寄存器(IWDG_KR) 中写入 0x5555。将其他值写入这个寄存器将会打乱操作顺序，寄存器（IWDG_PR/IWDG_RLR）将重新被保护。重装载操作(即IWDG_KR写入 0xAAAA)也会启动写保护功能。

    PS:IWDG_KR可以有三种赋值，每种赋值代表着不同的功能
----------------------------------------------------------------------------------------------------------------
    只要对以上三个寄存器进行相应的设置，我们就可以启动 STM32 的独立看门狗，启动过程可以按如下步骤实现（独立看门狗相关的库函数和定义分布在文件 stm32f10x_iwdg.h 和stm32f10x_iwdg.c 中） ：

1）取消寄存器IWDG_PR/IWDG_RLR的写保护（向 IWDG_KR 写入 0X5555）
    通过这步，我们取消 IWDG_PR 和 IWDG_RLR 的写保护，使后面可以操作这两个寄存器,设置 IWDG_PR 和 IWDG_RLR 的值。这在库函数中的实现函数是：
IWDG_WriteAccessCmd(IWDG_WriteAccess_Enable);

2）设置独立看门狗的预分频系数和重装载值 

设置看门狗的分频系数的函数是：
void IWDG_SetPrescaler(uint8_t IWDG_Prescaler);  //设置 IWDG 预分频值

设置看门狗的重装载值的函数是：
void IWDG_SetReload(uint16_t Reload); //设置 IWDG 重装载值

设置好看门狗的分频系数 prer 和重装载值就可以知道看门狗的喂狗时间 （也就是看门狗溢出时间） ，该时间的计算方式为：
                Tout=((4×2^prer)  ×rlr) /40
    其中 Tout 为看门狗溢出时间（单位为 ms） ；prer 为看门狗时钟预分频值（IWDG_PR 值），范围为 0~7；rlr 为看门狗的重装载值（IWDG_RLR 的值） ；
    比如我们设定 prer 值为 4， rlr 值为 625，那么就可以得到 Tout=64×625/40=1000ms，这样，看门狗的溢出时间就是 1s，只要你在一秒钟之内，有一次写入 0XAAAA 到 IWDG_KR，就不会导致看门狗复位（当然写入多次也是可以的）。
    这里需要提醒大家的是，看门狗的时钟不是准确的 40Khz，所以在喂狗的时候，最好不要太晚了，否则，有可能发生看门狗复位。

3）重载计数值喂狗（向 IWDG_KR 写入 0XAAAA）
库函数里面重载计数值的函数是：
IWDG_ReloadCounter();   //按照 IWDG 重装载寄存器的值重装载 IWDG 计数器
通过这句，将使 STM32 重新加载 IWDG_RLR 的值到看门狗计数器里面。 即实现独立看门狗的喂狗操作。

4)  启动看门狗(向 IWDG_KR 写入 0XCCCC)
库函数里面启动独立看门狗的函数是：
IWDG_Enable();   //使能 IWDG
通过这句，来启动 STM32 的看门狗。
    注意 IWDG 在一旦启用，就不能再被关闭！想要关闭，只能重启，并且重启之后不能打开 IWDG，否则问题依旧，所以在这里提醒大家，如果不用 IWDG 的话，就不要去打开它，免得麻烦。
    通过上面 4 个步骤，我们就可以启动 STM32 的看门狗了，使能了看门狗，在程序里面就
必须间隔一定时间喂狗，否则将导致程序复位。
点击(此处)折叠或打开
#include "sys.h"
#include "iwdg.h"

/**
 * 初始化独立看门狗
 * prer:分频数:0~7(只有低 3 位有效!)
 * 分频因子=4*2^prer.但最大值只能是 256!
 * rlr:重装载寄存器值:低 11 位有效.
 * 时间计算(大概):Tout=((4*2^prer)*rlr)/40 (ms).
 */
void IWDG_Init(u8 prer,u16 rlr)
{
    IWDG_WriteAccessCmd(IWDG_WriteAccess_Enable); /* 使能对寄存器IWDG_PR和IWDG_RLR的写操作*/
    IWDG_SetPrescaler(prer);    /*设置IWDG预分频值:设置IWDG预分频值*/
    IWDG_SetReload(rlr);     /*设置IWDG重装载值*/
    IWDG_ReloadCounter();    /*按照IWDG重装载寄存器的值重装载IWDG计数器*/
    IWDG_Enable();        /*使能IWDG*/
}

/**
 * 喂独立看门狗
 */
void IWDG_Feed(void)
{
    IWDG_ReloadCounter();    /*reload*/
}

    接下来我们看看主函数 main 的代码。 在主程序里面我们先初始化一下系统代码， 然后启动 按键输入和看门狗，在看门狗开启后马山点亮 LED0（DS0） ，并进入死循环等待按键的输入， 一旦 WK_UP 有按键，则喂狗，否则等待 IWDG 复位的到来。这段代码很容易理解，该部分代 码如下：
int main(void)
{
Stm32_Clock_Init(9); //系统时钟设置
delay_init(72); //延时初始化
uart_init(72,9600); //串口初始化
LED_Init();  //初始化与 LED 连接的硬件接口
KEY_Init(); //按键初始化
delay_ms(300); //让人看得到灭
IWDG_Init(4,625); //与分频数为 64,重载值为 625,溢出时间为 1s
LED0=0; //点亮 LED0
while(1)
{
if(KEY_Scan(0)==WKUP_PRES)IWDG_Feed();//如果 WK_UP 按下,则喂狗
delay_ms(10);
};
}

PS:个人理解及结合文章开头，看门狗的喂狗时间要和整个程序运行时间，delay时间有关，能不用则不用，可设置开关来关掉它。
